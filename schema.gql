# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Tag {
  id: ID!
  label: String!
  description: String
  created_at: Timestamp!
  updated_at: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Category {
  id: ID!
  label: String!
  alias: String
  description: String
  created_at: Timestamp!
  updated_at: Timestamp!
  delete_at: Timestamp!
  children: [Category!]
  parent: Category
}

type User {
  uid: ID!
  username: String!
  password: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  create_at: Timestamp!
  update_at: Timestamp!
  delete_at: Timestamp!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserPaginated {
  edges: [UserEdge!]
  nodes: [User!]
  totalCount: Int!
  hasNextPage: Boolean!
}

type Query {
  me: User!

  """find user by uid."""
  user(uid: String!): User!

  """all user with paginated."""
  users_paginated(after: String, first: Int): UserPaginated!
}

type Mutation {
  create_tag(tag: CreateTagInput!): Tag!
  create_category(category: CreateCategoryInput!): Category!
  delete_category(id: ID!): Boolean!
  login(password: String!, username: String!): String!

  """create user."""
  create_user(user: CreateUserInput!): User!

  """create user with verif code."""
  create_user_with_code(user: CreateUserWithCodeInput!): User!
  send_register_email(email: String!): Boolean!
  update_user(user: UpdateUserInput!): String!
}

input CreateTagInput {
  label: String!
  description: String
}

input CreateCategoryInput {
  label: String!
  alias: String
  description: String
  parent_id: Float
  children: [CreateCategoryInput!]
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
}

input CreateUserWithCodeInput {
  username: String!
  password: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  code: String!
}

input UpdateUserInput {
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  password: String
}

type Subscription {
  user_created: User!
}
