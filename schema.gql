# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  uid: ID!
  username: String!
  email: String
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  create_at: Date!
  update_at: Date!
  delete_at: Date
}

"""Date custom scalar type"""
scalar Date

type Character {
  name: String!
  avatar: String
  description: String
  tags: [String!]
}

type Vote {
  id: ID!
  status: VoteStatus!
  owner: User!
  medium: Medium!
  create_at: Date!
  update_at: Date!
  delete_at: Date
}

enum VoteStatus {
  LIKD
  DISLIKE
  DEFAULT
}

type Medium {
  id: ID!
  name: String
  alias_name: String
  cover: String
  posters: [String!]
  description: String
  duration: Float
  preview_url: String
  url: String!
  low_quality_url: String
  medium_quality_url: String
  high_quality_url: String
  super_quality_url: String
  votes: [Vote!]
  vote_like_count: Float
  vote_dislike_count: Float
  create_at: Date!
  update_at: Date!
  delete_at: Date
  version: Float!
}

type ShadowMedium {
  id: ID!
  name: String
  alias_name: String
  cover: String
  posters: [String!]
  description: String
  duration: Float
  preview_url: String
  url: String!
  low_quality_url: String
  medium_quality_url: String
  high_quality_url: String
  super_quality_url: String
  votes: [Vote!]
  vote_like_count: Float
  vote_dislike_count: Float
  create_at: Date!
  update_at: Date!
  delete_at: Date
  version: Float!
}

type Shadow {
  id: ID!
  title: String!
  sub_title: String
  alias_title: String
  cover: String!
  posters: [String!]
  description: String
  about: String
  region: Region!
  credits: [Character!]
  sources: [ShadowMedium!]!
  author: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date
}

enum Region {
  Mainland
  America
  Hongkong
  Taiwan
  Britain
  India
}

type Category {
  id: ID!
  label: String!
  alias: String
  description: String
  create_at: Date!
  update_at: Date!
  delete_at: Date
  children: [Category!]
  parent: Category
}

type Tag {
  id: ID!
  label: String!
  description: String
  shadows: [Shadow!]
  categories: [Category!]
  create_at: Date!
  update_at: Date!
}

type ShadowEdge {
  cursor: String!
  node: Shadow!
}

type ShadowPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type ShadowPaginated {
  edges: [ShadowEdge!]
  nodes: [Shadow!]
  pageInfo: ShadowPageInfo!
  totalCount: Int!
}

type Bullet {
  id: ID!
  content: String!
  point: Float
  create_at: Date!
  author: User!
  medium: Medium!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type UserPaginated {
  edges: [UserEdge!]
  nodes: [User!]
  pageInfo: UserPageInfo!
  totalCount: Int!
}

type PlatformAuthWay {
  platform: String!
  url: String!
}

type Topic {
  id: ID!
  title: String!
  description: String
  top_shadow: Shadow
  top_shadows: [Shadow!]
  create_at: Date!
  update_at: Date!
  delete_at: Date
}

type Review {
  id: ID!
  content: String!
  author: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date
}

type ReviewEdge {
  cursor: String!
  node: Review!
}

type ReviewPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type ReviewPaginated {
  edges: [ReviewEdge!]
  nodes: [Review!]
  pageInfo: ReviewPageInfo!
  totalCount: Int!
}

type Playlist {
  id: ID!
  title: String!
  description: String
  cover: String
  shadows: [Shadow!]
  shadows_count: Float
  author: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date
}

type PlaylistEdge {
  cursor: String!
  node: Playlist!
}

type PlaylistPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type PlaylistPaginated {
  edges: [PlaylistEdge!]
  nodes: [Playlist!]
  pageInfo: PlaylistPageInfo!
  totalCount: Int!
}

type Follow {
  follower: User!
  owner: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date
}

type FollowEdge {
  cursor: String!
  node: Follow!
}

type FollowPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type FollowPaginated {
  edges: [FollowEdge!]
  nodes: [Follow!]
  pageInfo: FollowPageInfo!
  totalCount: Int!
}

type Query {
  shadow(id: ID!): Shadow!
  shadows_paginated(query: PaginatedQuery): ShadowPaginated!
  user_shadows_paginated(query: PaginatedQuery, author_username: String!): ShadowPaginated!
  me: User!
  platform_auth_way: [PlatformAuthWay!]!

  """find username exit."""
  has_username(username: String!): Boolean!

  """find user by uid or username."""
  user(username: String, uid: String): User!

  """all user with paginated."""
  users_paginated(query: PaginatedQuery): UserPaginated!
  current_topic: Topic!
  shadow_urges: [Shadow!]!
  shadow_urges_by_shadow(shadow_id: ID!): [Shadow!]!
  user_urges: [User!]!
  shadow_next_urges_by_shadow(shadow_id: ID!): [Shadow!]!
  reviews_paginated(query: PaginatedQuery, type_id: ID, type: ReviewMedium): ReviewPaginated!
  playlists_paginated(author_username: String, author_uid: String, query: PaginatedQuery): PlaylistPaginated!
  playlist(playlist_id: Float!): Playlist!
  follows: [Follow!]!
  follows_paginated(query: PaginatedQuery): FollowPaginated!
  follows_total(follower_uid: String): Int!
  fans: [Follow!]!
  fans_paginated(query: PaginatedQuery): FollowPaginated!
  fans_total(owner_uid: String): Int!
  is_following(follower_uid: String, owner_uid: String!): Boolean!
  vote(medium_id: Float!): Vote!
  medium_vote_count(status: String!, medium_id: Float!): Int!
}

input PaginatedQuery {
  first: Int
  after: String
  last: Int
  before: String
}

enum ReviewMedium {
  MEDIUM
  SHADOW
}

type Mutation {
  create_tag(tag: CreateTagInput!): Tag!
  add_shadow_to_tag(tag_id: Float!, shadow_id: Float!): Boolean!
  add_category_to_tag(tag_id: Float!, category_id: Float!): Boolean!
  create_shadow(shadow: CreateShadowInput!): Shadow!
  update_shadow(shadow: UpdateShadowInput!, shadow_id: ID!): Shadow!
  add_mediums_to_shadow(shadow_medium: CreateShadowMediumInput!, shadow_id: ID!): Shadow!
  create_category(category: CreateCategoryInput!): Category!
  delete_category(id: ID!): Boolean!
  create_bullet(bullet: CreateBulletInput!): Bullet!
  login(password: String!, username: String!): String!

  """create user."""
  create_user(user: CreateUserInput!): User!

  """create user with verif code."""
  create_user_with_code(user: CreateUserWithCodeInput!): User!
  send_register_email(email: String!): Boolean!
  update_user(user: UpdateUserInput!): User!
  upload_file_oss(file: Upload!): String!
  create_topic(topic: CreateTopicInput!): Topic!
  create_review(review: CreateReviewInput!): Review!
  create_playlist(playlist: CreatePlaylistInput!): Playlist!
  add_shadow_to_playlist(playlist_id: Float!, shadow_id: Float!): Boolean!
  create_follow(follow: CreateFollowInput!): Follow!
  remove_follow(follow: DeleteFollowInput!): Follow!
  create_or_update_vote(vote: CreateVoteInput!): Vote!
}

input CreateTagInput {
  label: String!
  description: String
}

input CreateShadowInput {
  title: String!
  sub_title: String
  alias_title: String
  cover: String!
  posters: [String!]
  description: String
  about: String
  region: String
  credits: [CreateCharacterInput!]
  sources: [CreateShadowMediumInput!]
}

input CreateCharacterInput {
  name: String!
  avatar: String
  description: String
  tags: [String!]
}

input CreateShadowMediumInput {
  name: String!
  url: String!
  alias_name: String
  cover: String
  posters: [String!]
  description: String
  shadow_id: ID
}

input UpdateShadowInput {
  sub_title: String
  alias_title: String
  posters: [String!]
  description: String
  about: String
  region: String
  credits: [CreateCharacterInput!]
  sources: [CreateShadowMediumInput!]
  title: String
  cover: String
}

input CreateCategoryInput {
  label: String!
  alias: String
  description: String
  parent_id: Float
  children: [CreateCategoryInput!]
}

input CreateBulletInput {
  content: String!
  point: Float
  medium_id: Int!
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
}

input CreateUserWithCodeInput {
  username: String!
  password: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  code: String!
}

input UpdateUserInput {
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateTopicInput {
  title: String!
  description: String
  top_shadow_id: ID
  top_shadows_ids: [ID!]
}

input CreateReviewInput {
  content: String!
  author_uid: ID
  type: ReviewMedium!
  type_id: ID!
}

input CreatePlaylistInput {
  title: String!
  description: String
  cover: String
}

input CreateFollowInput {
  follower_uid: ID
  owner_uid: ID!
}

input DeleteFollowInput {
  follower_uid: ID
  owner_uid: ID!
}

input CreateVoteInput {
  medium_id: Float!
  status: VoteStatus!
  owner_uid: String
}

type Subscription {
  user_created: User!
  review_created(type_id: ID!, type: ReviewMedium!): Review!
}
