# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  uid: ID!
  username: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  create_at: Date!
  update_at: Date!
  delete_at: Date!
}

"""Date custom scalar type"""
scalar Date

type Character {
  name: String!
  avatar: String
  description: String
}

type Medium {
  id: ID!
  name: String
  alias_name: String
  cover: String
  posters: [String!]
  description: String
  duration: Float
  preview_url: String
  url: String!
  low_quality_url: String
  medium_quality_url: String
  high_quality_url: String
  super_quality_url: String
  create_at: Date!
  update_at: Date!
  delete_at: Date!
  version: Float!
}

type MovieMedium {
  id: ID!
  name: String
  alias_name: String
  cover: String
  posters: [String!]
  description: String
  duration: Float
  preview_url: String
  url: String!
  low_quality_url: String
  medium_quality_url: String
  high_quality_url: String
  super_quality_url: String
  create_at: Date!
  update_at: Date!
  delete_at: Date!
  version: Float!
}

type Movie {
  id: ID!
  title: String!
  sub_title: String
  alias_title: String
  cover: String!
  posters: [String!]
  description: String
  region: Region!
  actors: [Character!]
  directors: [Character!]
  sources: [MovieMedium!]!
  author: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date!
}

enum Region {
  Mainland
  America
  Hongkong
  Taiwan
  Britain
  India
}

type Category {
  id: ID!
  label: String!
  alias: String
  description: String
  create_at: Date!
  update_at: Date!
  delete_at: Date!
  children: [Category!]
  parent: Category
}

type Tag {
  id: ID!
  label: String!
  description: String
  movies: [Movie!]
  categories: [Category!]
  create_at: Date!
  update_at: Date!
}

type MovieEdge {
  cursor: String!
  node: Movie!
}

type MoviePageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type MoviePaginated {
  edges: [MovieEdge!]
  nodes: [Movie!]
  pageInfo: MoviePageInfo!
  totalCount: Int!
}

type Bullet {
  id: ID!
  content: String!
  point: Float
  create_at: Date!
  author: User!
  medium: Medium!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type UserPaginated {
  edges: [UserEdge!]
  nodes: [User!]
  pageInfo: UserPageInfo!
  totalCount: Int!
}

type Topic {
  id: ID!
  title: String!
  description: String
  top_movie: Movie
  top_movies: [Movie!]
  create_at: Date!
  update_at: Date!
  delete_at: Date!
}

type Review {
  id: ID!
  content: String!
  author: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date!
}

type ReviewEdge {
  cursor: String!
  node: Review!
}

type ReviewPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type ReviewPaginated {
  edges: [ReviewEdge!]
  nodes: [Review!]
  pageInfo: ReviewPageInfo!
  totalCount: Int!
}

type Playlist {
  id: ID!
  title: String!
  description: String
  cover: String
  movies: [Movie!]
  author: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date!
}

type Follow {
  follower: User!
  owner: User!
  create_at: Date!
  update_at: Date!
  delete_at: Date!
}

type FollowEdge {
  cursor: String!
  node: Follow!
}

type FollowPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type FollowPaginated {
  edges: [FollowEdge!]
  nodes: [Follow!]
  pageInfo: FollowPageInfo!
  totalCount: Int!
}

type Query {
  movie(id: ID!): Movie!
  movies_paginated(query: PaginatedQuery): MoviePaginated!
  me: User!

  """find user by uid."""
  user(uid: String!): User!

  """all user with paginated."""
  users_paginated(query: PaginatedQuery): UserPaginated!
  current_topic: Topic!
  movie_urges: [Movie!]!
  user_urges: [User!]!
  reviews_paginated(query: PaginatedQuery, medium_id: ID, type: ReviewMedium): ReviewPaginated!
  playlist(playlist_id: Float!): Playlist!
  follows: [Follow!]!
  follows_paginated(query: PaginatedQuery): FollowPaginated!
  follows_total(follower_uid: String): Int!
  fans: [Follow!]!
  fans_paginated(query: PaginatedQuery): FollowPaginated!
  fans_total(owner_uid: String): Int!
  is_following(follower_uid: String, owner_uid: String!): Boolean!
}

input PaginatedQuery {
  first: Int
  after: String
  last: Int
  before: String
}

enum ReviewMedium {
  MOVIE
}

type Mutation {
  create_tag(tag: CreateTagInput!): Tag!
  add_movie_to_tag(tag_id: Float!, movie_id: Float!): Boolean!
  add_category_to_tag(tag_id: Float!, category_id: Float!): Boolean!
  create_movie(movie: CreateMovieInput!): Movie!
  add_mediums_to_movie(movie_medium: CreateMovieMediumInput!, movie_id: ID!): Movie!
  create_category(category: CreateCategoryInput!): Category!
  delete_category(id: ID!): Boolean!
  create_bullet(bullet: CreateBulletInput!): Bullet!
  login(password: String!, username: String!): String!

  """create user."""
  create_user(user: CreateUserInput!): User!

  """create user with verif code."""
  create_user_with_code(user: CreateUserWithCodeInput!): User!
  send_register_email(email: String!): Boolean!
  update_user(user: UpdateUserInput!): User!
  upload_file_oss(file: Upload!): String!
  create_topic(topic: CreateTopicInput!): Topic!
  create_review(review: CreateReviewInput!): Review!
  create_playlist(playlist: CreatePlaylistInput!): Playlist!
  add_movie_to_playlist(playlist_id: Float!, movie_id: Float!): Boolean!
  create_follow(follow: CreateFollowInput!): Follow!
  remove_follow(follow: DeleteFollowInput!): Follow!
}

input CreateTagInput {
  label: String!
  description: String
}

input CreateMovieInput {
  title: String!
  sub_title: String
  alias_title: String
  cover: String!
  posters: [String!]
  description: String
  region: String
  actors: [CreateCharacterInput!]
  directors: [CreateCharacterInput!]
  sources: [CreateMovieMediumInput!]
}

input CreateCharacterInput {
  name: String!
  avatar: String
  description: String
}

input CreateMovieMediumInput {
  name: String!
  url: String!
  alias_name: String
  posters: [String!]
  description: String
  movie_id: ID
}

input CreateCategoryInput {
  label: String!
  alias: String
  description: String
  parent_id: Float
  children: [CreateCategoryInput!]
}

input CreateBulletInput {
  content: String!
  point: Float
  medium_id: Int!
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
}

input CreateUserWithCodeInput {
  username: String!
  password: String!
  email: String!
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  code: String!
}

input UpdateUserInput {
  nickname: String
  avatar: String
  mobile: String
  address: String
  description: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateTopicInput {
  title: String!
  description: String
  top_movie_id: ID
  top_movies_ids: [ID!]
}

input CreateReviewInput {
  content: String!
  author_uid: ID
  type: ReviewMedium!
  medium_id: ID!
}

input CreatePlaylistInput {
  title: String!
  description: String
  cover: String
}

input CreateFollowInput {
  follower_uid: ID
  owner_uid: ID!
}

input DeleteFollowInput {
  follower_uid: ID
  owner_uid: ID!
}

type Subscription {
  user_created: User!
  review_created(medium_id: ID!, type: ReviewMedium!): Review!
}
